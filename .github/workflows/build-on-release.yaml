# .github/workflows/build-on-release.yml
name: Build and Attach Assets

# Trigger when a release is published (not drafted, not pre-released)
# You could also use 'created' or 'prereleased' depending on your exact needs
on:
  release:
    types: [published]
  workflow_dispatch: # Allow manual triggering for testing (optional)

env:
  # Set the binary name, adjust as needed
  BIN_NAME: riveter
  # Set the Rust toolchain version
  RUST_TOOLCHAIN: stable

jobs:
  build-binaries:
    name: Build Release Binaries
    strategy:
      fail-fast: false # Keep running other matrix jobs even if one fails
      matrix:
        include:
          # Linux GNU (glibc)
          - target: x86_64-unknown-linux-gnu
            os: ubuntu-latest
            archive_suffix: ".tar.gz"
          - target: aarch64-unknown-linux-gnu
            os: ubuntu-latest
            archive_suffix: ".tar.gz"
            cross: true

          # macOS
          - target: x86_64-apple-darwin
            os: macos-13 # Use an x86_64 runner
            archive_suffix: ".tar.gz"
          - target: aarch64-apple-darwin
            os: macos-14 # Use an ARM runner (Apple Silicon)
            artifact_suffix: "-arm64"

          # Windows MSVC
          - target: x86_64-pc-windows-msvc
            os: windows-latest
            archive_suffix: ".zip"
            binary_suffix: ".exe"
          - target: aarch64-pc-windows-msvc
            os: windows-latest
            archive_suffix: ".zip"
            binary_suffix: ".exe"

    runs-on: ${{ matrix.os }}

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Install Rust toolchain (${{ env.RUST_TOOLCHAIN }})
        uses: dtolnay/rust-toolchain@master
        with:
          toolchain: ${{ env.RUST_TOOLCHAIN }}
          targets: ${{ matrix.target }}

      # --- Optional: Install cross-compilation dependencies (Linux -> Linux ARM) ---
      - name: Install cross-compilation tools (Linux ARM)
        if: matrix.cross && runner.os == 'Linux' && matrix.target == 'aarch64-unknown-linux-gnu'
        run: |
          sudo apt-get update -y
          sudo apt-get install -y gcc-aarch64-linux-gnu libc6-dev-arm64-cross

      # --- Configure Linker (Linux -> Linux ARM) ---
      - name: Set cross-linker (Linux ARM)
        if: matrix.cross && runner.os == 'Linux' && matrix.target == 'aarch64-unknown-linux-gnu'
        run: |
          echo "CARGO_TARGET_AARCH64_UNKNOWN_LINUX_GNU_LINKER=aarch64-linux-gnu-gcc" >> $GITHUB_ENV

      # --- Cache Cargo dependencies ---
      - name: Cache Cargo registry and index
        uses: actions/cache@v4
        with:
          path: |
            ~/.cargo/bin/
            ~/.cargo/registry/index/
            ~/.cargo/registry/cache/
            ~/.cargo/git/db/
            target/
          key: ${{ runner.os }}-${{ matrix.target }}-cargo-${{ hashFiles('**/Cargo.lock') }}
          restore-keys: |
            ${{ runner.os }}-${{ matrix.target }}-cargo-

      # --- Build the binary ---
      - name: Build binary
        # Use the tag name from the release event for versioning if needed
        # Example: cargo build --release --target ${{ matrix.target }} --features "version=${{ github.event.release.tag_name }}"
        run: cargo build --verbose --release --target ${{ matrix.target }}

      # --- Prepare artifact ---
      - name: Prepare artifact name and path
        id: prepare_artifact
        shell: bash
        run: |
          # Get the tag name (e.g., v0.1.0)
          TAG_NAME="${{ github.event.release.tag_name }}"

          # Define the staging directory
          ARTIFACT_DIR="dist"
          mkdir -p $ARTIFACT_DIR

          # Define the source path of the built binary
          # matrix.binary_suffix is ".exe" on Windows, "" otherwise
          SOURCE_BINARY_PATH="target/${{ matrix.target }}/release/${{ env.BIN_NAME }}${{ matrix.binary_suffix }}"

          # --- THIS IS THE KEY PART for the name INSIDE the archive ---
          # Define the desired simple name for the binary INSIDE the archive
          DEST_BINARY_NAME="${{ env.BIN_NAME }}${{ matrix.binary_suffix }}" # e.g., "riveter" or "riveter.exe"

          # Copy the built binary to the staging dir WITH the simple name
          echo "Copying '$SOURCE_BINARY_PATH' to '$ARTIFACT_DIR/$DEST_BINARY_NAME'"
          cp "$SOURCE_BINARY_PATH" "$ARTIFACT_DIR/$DEST_BINARY_NAME"

          # Define the final ARCHIVE name using the binstall pattern
          # matrix.archive_suffix is ".zip" on Windows, ".tar.gz" otherwise
          ARCHIVE_NAME="${{ env.BIN_NAME }}-${TAG_NAME}-${{ matrix.target }}${{ matrix.archive_suffix }}" # e.g., "riveter-v0.1.0-x86_64-pc-windows-msvc.zip"
          ARCHIVE_PATH="$ARCHIVE_NAME"

          echo "Creating archive '$ARCHIVE_NAME' containing '$DEST_BINARY_NAME' at root level"

          # Create the archive, ensuring the binary is at the root
          if [[ "${{ matrix.archive_suffix }}" == ".zip" ]]; then
            # Windows: Create zip containing only DEST_BINARY_NAME from ARTIFACT_DIR
            cd $ARTIFACT_DIR
            powershell Compress-Archive -Path "$DEST_BINARY_NAME" -DestinationPath "../$ARCHIVE_NAME"
            cd ..
          else # .tar.gz
            # Linux/macOS: Create tar.gz containing only DEST_BINARY_NAME from ARTIFACT_DIR
            # -C changes directory so the path inside the tar is just the filename
            tar czf "$ARCHIVE_NAME" -C $ARTIFACT_DIR "$DEST_BINARY_NAME"
          fi

          echo "ARCHIVE_NAME=$ARCHIVE_NAME" >> $GITHUB_OUTPUT
          echo "ARCHIVE_PATH=$ARCHIVE_PATH" >> $GITHUB_OUTPUT

      # --- Upload artifact (for use in the next job) ---
      - name: Upload artifact for release job
        uses: actions/upload-artifact@v4
        with:
          name: ${{ steps.prepare_artifact.outputs.ARCHIVE_NAME }} # Use unique archive name as artifact name
          path: ${{ steps.prepare_artifact.outputs.ARCHIVE_PATH }}

  # --- Upload Assets to the Triggering Release ---
  upload-assets:
    name: Upload Assets to Release
    needs: build-binaries # Run only after all builds succeed
    runs-on: ubuntu-latest

    permissions:
      contents: write # Need write permission to upload release assets

    steps:
      - uses: actions/checkout@v4
      - name: Download all build artifacts
        uses: actions/download-artifact@v4
        with:
          path: artifacts/ # Download all artifacts into the 'artifacts' directory

      - name: Display structure of downloaded files
        run: ls -R artifacts/

      - name: Upload assets to GitHub Release
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }} # Use the GitHub token to authenticate
          # Get the tag name from the release event that triggered the workflow
          TAG_NAME: ${{ github.event.release.tag_name }}
        run: |
          # Use gh release upload to upload all files from the subdirectories within artifacts/
          # The subdirectories are named after the artifacts (our archive names)
          # --clobber overwrites assets with the same name if the job is re-run
          gh release upload "$TAG_NAME" artifacts/*/* --clobber
